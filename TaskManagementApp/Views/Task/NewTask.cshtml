@model TaskManagementApp.ViewModels.EditTaskViewModel

@{
    string currTask = string.Empty;
    string action = string.Empty;

    if (Model.TaskName == null)
    {
        currTask = "New Task";
        action = "New Task";
        ViewBag.Title = "New Task";
    }
    else
    {
        currTask = Model.TaskName;
        action = "Edit Task";
        ViewBag.Title = "Edit Task";
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="container-fluid">
        <div class="card">
            <div class="card-body">
                <nav aria-label="breadcrumb mb-4">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Task")">Task Management</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@currTask</li>
                    </ol>
                </nav>
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title fw-semibold mb-4">@action</h5>
                        @using (Html.BeginForm("NewTask", "Task", FormMethod.Post))
                        {
                            <div class="card-body px-4 py-3">
                                <div class="row mb-3 ">
                                    @Html.LabelFor(m => m.TaskName)
                                    @Html.TextBoxFor(m => m.TaskName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.TaskName)
                                </div>
                                <div class="row mb-3 ">
                                    @Html.LabelFor(m => m.TaskDescription)
                                    @Html.TextAreaFor(m => m.TaskDescription, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.TaskDescription)
                                </div>
                                <div class="row mb-3 ">
                                    <div class="col-md-6 m-0 p-0">
                                        @Html.LabelFor(m => m.PriorityId)
                                        @Html.DropDownListFor(m => m.PriorityId, new SelectList(Model.PriorityList, "Id", "Description"), "Select Task Priority", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.PriorityId)
                                    </div>
                                    <div class="col-md-6 m-0 p-0">
                                        @Html.LabelFor(m => m.StatusId)
                                        @Html.DropDownListFor(m => m.StatusId, new SelectList(Model.StatusList, "Id", "Description"), "Select Task Status", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.StatusId)
                                    </div>
                                </div>
                                <div class="row mb-3 dueDate">
                                    @Html.LabelFor(m => m.DueDate)
                                    @Html.TextBoxFor(m => m.DueDate, new { @class = "form-control", type = "date", @Value = Model.DueDate.HasValue ? Model.DueDate.Value.ToString("yyyy-MM-dd") : DateTime.Today.ToString("yyyy-MM-dd"), @min = DateTime.Today.ToString("yyyy-MM-dd") })
                                    @Html.ValidationMessageFor(m => m.DueDate)
                                </div>
                                <div class="form-check ps-3 mb-3">
                                    @Html.CheckBoxFor(m => Model.IsRecurring, new { @class = "form-check-input", @id = "IsRecurring" })
                                    @Html.LabelFor(m => Model.IsRecurring, new { @class = "form-check-label" })
                                </div>
                                <div class="radio-group mb-3" id="RecurringControl">
                                    <div class="row mb-3">
                                        <div class="col-md-6 p-0">
                                            @Html.LabelFor(m => m.StartDate)
                                            @Html.TextBoxFor(m => m.StartDate, new { @class = "form-control", type = "date", @min = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd") })
                                            @Html.ValidationMessageFor(m => m.StartDate)
                                        </div>
                                        <div class="col-md-6 p-0">
                                            @Html.LabelFor(m => m.EndDate)
                                            @Html.TextBoxFor(m => m.EndDate, new { @class = "form-control", type = "date", @min = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd") })
                                            @Html.ValidationMessageFor(m => m.EndDate)
                                        </div>
                                    </div>
                                    <div class="form-check form-check-inline ps-3">
                                        @Html.RadioButtonFor(m => m.RecurringType, "Daily", new { @class = "form-check-input" })
                                        <label class="form-check-label">Daily</label>
                                    </div>
                                    <div class="form-check form-check-inline ">
                                        @Html.RadioButtonFor(m => m.RecurringType, "Weekly", new { @class = "form-check-input" })
                                        <label class="form-check-label">Weekly</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <label class="form-check-label">Monthly</label>
                                        @Html.RadioButtonFor(m => m.RecurringType, "Monthly", new { @class = "form-check-input" })
                                    </div>
                                    <div class="form-check form-check-inline">
                                        @Html.RadioButtonFor(m => m.RecurringType, "Yearly", new { @class = "form-check-input" })
                                        <label class="form-check-label">Yearly</label>
                                    </div>
                                </div>
                                <div class="row mb-3 ">
                                    @Html.LabelFor(m => m.AssignToId)
                                    @Html.DropDownListFor(m => m.AssignToId, new SelectList(Model.AssigneeList, "Id", "Username"), "Assign Task To", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.AssignToId)
                                </div>
                                @Html.HiddenFor(m => m.Id)
                                @Html.HiddenFor(m => m.DependencyId)
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-primary float-end mb-3">@action</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $("#RecurringControl").hide()
        })

        $("#IsRecurring").on("click", function () {
            if ($("#IsRecurring").is(":checked")) {
                $('#RecurringControl').show()
                $('.dueDate').hide()
            } else {
                $('#RecurringControl').hide()
                $('.dueDate').show()
            }
        })
    </script>
}

