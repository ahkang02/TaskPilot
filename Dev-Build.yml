trigger:
- master

pool: 
  name: Dev
  demands: agent.name -equals dev-build

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: 'Building'
  displayName: 'Building Web Application'
  jobs:
  - job: 'Building'
    displayName: 'Building Web Application'
    steps:
      - checkout: self
        fetchDepth: 0
   
      - task: SonarQubePrepare@6
        name: 'SonarQubePrep'
        inputs:
          SonarQube: 'TaskPilot_SonarQube'
          scannerMode: 'MSBuild'
          projectKey: 'TaskPilot_TaskPilot_a22dca1d-0cc9-4168-867a-f5b6c3ef1d0e'
                
      - task: NuGetToolInstaller@1
        name: 'NugetToolInstaller'

      - task: NuGetCommand@2
        name: 'RestoreNuget'
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          
      - task: DotNetCoreCLI@2
        displayName: 'Restoring Project Files'
        inputs:
          command: 'restore'
          projects: 'TaskPilot.Web/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Building Project Files'
        inputs:
          command: 'build'
          projects: 'TaskPilot.Web/*.csproj'
          arguments: '--configuration Release'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: 'TaskPilot.Tests/*.csproj'
          arguments: '--configuration Release --collect "Code Coverage"'  

      - task: SonarQubeAnalyze@6

      - task: SonarQubePublish@6
        inputs:
            pollingTimeoutSec: '300'

# Commented out due to SonarQube cannot separate testing into another stage
# - stage: 'Testing'
#   displayName: 'Running Unit Test'
#   dependsOn: 'Building'
#   condition: succeeded()
#   jobs:
#   - job: 'Testing'
#     displayName: 'Running Unit Test'
#     steps:
#       - task: DotNetCoreCLI@2
#         inputs:
#           command: 'test'
#           projects: 'TaskPilot.Tests/*.csproj'
#           arguments: '--configuration Release --collect "Code Coverage"'  

- stage: 'Preparing_Artifact'
  displayName: 'Building Artifact'
  dependsOn: 'Building'
  condition: succeeded()
  jobs:
  - job: 'Compiling'
    displayName: 'Building Artifact'
    steps:
      - task: DotNetCoreCLI@2
        name: 'buildArtifact'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'TaskPilot.Web/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true
          
      - task: PublishBuildArtifacts@1
        name: 'publishArtifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'taskpilotartifact'
          publishLocation: Container