trigger:
- master

pool: 
  name: Dev
  demands: agent.name -equals dev-build

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build Web Application'
  jobs:
  - job: 'Build'
    displayName: 'Building Web Application'
    steps:
    
      - task: NuGetToolInstaller@1
        name: 'NugetToolInstaller'

      - task: NuGetCommand@2
        name: 'RestoreNuget'
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: 'TaskPilot.Web/*.csproj'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: 'TaskPilot.Web/*.csproj'
          arguments: '--configuration Release'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: 'TaskPilot.Tests/*.csproj'
          arguments: '--configuration Release'

      - task: DotNetCoreCLI@2
        name: 'buildArtifact'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'TaskPilot.Web/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true
          
      - task: PublishBuildArtifacts@1
        name: 'publishArtifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'taskpilotartifact'
          publishLocation: Container